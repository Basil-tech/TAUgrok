import torch
import numpy as np
import torch.nn as nn


# standard transformer pos encoding from "attention is all you need"
class PositionalEncoding(nn.Module):
    def __init__(self, model_dim, max_len=5000):
        super().__init__()
        position = torch.arange(max_len).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, model_dim, 2) * (-np.log(10000.0) / model_dim))
        pe = torch.zeros(max_len, 1, model_dim)
        pe[:, 0, 0::2] = torch.sin(position * div_term)
        pe[:, 0, 1::2] = torch.cos(position * div_term)
        self.register_buffer('pe', pe)

    def forward(self, x):
        return x + self.pe[:x.size(0)]


class TransformerModel(nn.Module):
    # args from A.1.2 in the paper
    def __init__(self, vocab_size, model_dim=128, nhead=4, num_layers=2):
        super().__init__()
        self.embedding = nn.Embedding(vocab_size, model_dim)
        self.pos_encoder = PositionalEncoding(model_dim)
        # Weirdly, the paper mentions a " standard decoder-only transformer Vaswani et al. 
        # (2017) with causal attention masking". This is implemented as a transformer encoder
        # in pytorch, so we use that.
        self.transformer_encoder = nn.TransformerEncoder(
            encoder_layer=nn.TransformerEncoderLayer(model_dim, nhead, dim_feedforward=512, batch_first=True, dropout=0),
            num_layers=num_layers
        )
        self.prediction = nn.Linear(model_dim, vocab_size)
        self.model_dim = model_dim
        # i am creating a bigger mask than needed, i'll slice it later according to the seq length
        # the reg buffer thingy is to make sure it is part of the model state but not a parameter
        self.register_buffer('mask', torch.tril(torch.ones(vocab_size, vocab_size)))



    def forward(self, x):
        _, seq_len = x.size()
        # The sqrt scaling - again from attention is all you need, 
        # suppose to suppress the magnitude generated by the dot 
        # product in the attention mechanism.
        x = self.embedding(x) * np.sqrt(self.model_dim)         
        x = self.pos_encoder(x)
        causal_mask = self.mask[:seq_len, :seq_len]
        # nice trick - the mask is filled with -inf, causing the softmax inside the transformer to be 0.
        causal_mask = causal_mask.masked_fill(causal_mask == 0, float('-inf')).masked_fill(causal_mask == 1, 0.0)
        x = self.transformer_encoder(x, causal_mask)
        return self.prediction(x)